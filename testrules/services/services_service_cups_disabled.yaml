id: services_service_cups_disabled
title: Disable the CUPS Service
discussion: Turn off unneeded services to reduce attack surface.
check: $OS_VALUE
result:
  integer: 1
fix: $OS_VALUE
references:
  cce:
    - $OS_VALUE
  cci:
    - N/A
  800-53r4:
    - CM-6(a)
    - CM-7(a)
    - CM-7(b)
  srg:
    - N/A
  disa_stig:
    - $OS_VALUE
  cis:
    benchmark:
      - $OS_VALUE
tags:
  - cis_lvl1
  - cis_lvl2
  - client
  - server
severity: unknown
os_specifics:
  rhel:
    '10':
      references:
        cce:
          - CCE-86174-0
        disa_stig:
          - N/A
      check:
        - N/A
      fix: |
        [source,bash]
        ---
        # Remediation is applicable only in certain platforms
        if rpm --quiet -q kernel; then

        SYSTEMCTL_EXEC='/usr/bin/systemctl'
        if [[ $("$SYSTEMCTL_EXEC" is-system-running) != "offline" ]]; then
          "$SYSTEMCTL_EXEC" stop 'cups.service'
        fi
        "$SYSTEMCTL_EXEC" disable 'cups.service'
        "$SYSTEMCTL_EXEC" mask 'cups.service'
        # Disable socket activation if we have a unit file for it
        if "$SYSTEMCTL_EXEC" -q list-unit-files cups.socket; then
            if [[ $("$SYSTEMCTL_EXEC" is-system-running) != "offline" ]]; then
              "$SYSTEMCTL_EXEC" stop 'cups.socket'
            fi
            "$SYSTEMCTL_EXEC" mask 'cups.socket'
        fi
        # The service may not be running because it has been started and failed,
        # so let's reset the state so OVAL checks pass.
        # Service should be 'inactive', not 'failed' after reboot though.
        "$SYSTEMCTL_EXEC" reset-failed 'cups.service' || true

        else
            >&2 echo 'Remediation is not applicable, nothing was done'
        fi

        ---
    '8':
      references:
        cce:
          - CCE-82861-6
        disa_stig:
          - N/A
      check:
        - N/A
      fix: |
        [source,bash]
        ---
        # Remediation is applicable only in certain platforms
        if rpm --quiet -q kernel; then

        SYSTEMCTL_EXEC='/usr/bin/systemctl'
        if [[ $("$SYSTEMCTL_EXEC" is-system-running) != "offline" ]]; then
          "$SYSTEMCTL_EXEC" stop 'cups.service'
        fi
        "$SYSTEMCTL_EXEC" disable 'cups.service'
        "$SYSTEMCTL_EXEC" mask 'cups.service'
        # Disable socket activation if we have a unit file for it
        if "$SYSTEMCTL_EXEC" -q list-unit-files cups.socket; then
            if [[ $("$SYSTEMCTL_EXEC" is-system-running) != "offline" ]]; then
              "$SYSTEMCTL_EXEC" stop 'cups.socket'
            fi
            "$SYSTEMCTL_EXEC" mask 'cups.socket'
        fi
        # The service may not be running because it has been started and failed,
        # so let's reset the state so OVAL checks pass.
        # Service should be 'inactive', not 'failed' after reboot though.
        "$SYSTEMCTL_EXEC" reset-failed 'cups.service' || true

        else
            >&2 echo 'Remediation is not applicable, nothing was done'
        fi

        ---
    '9':
      references:
        cce:
          - CCE-90795-6
        disa_stig:
          - N/A
      check:
        - N/A
      fix: |
        [source,bash]
        ---
        # Remediation is applicable only in certain platforms
        if rpm --quiet -q kernel; then

        SYSTEMCTL_EXEC='/usr/bin/systemctl'
        if [[ $("$SYSTEMCTL_EXEC" is-system-running) != "offline" ]]; then
          "$SYSTEMCTL_EXEC" stop 'cups.service'
        fi
        "$SYSTEMCTL_EXEC" disable 'cups.service'
        "$SYSTEMCTL_EXEC" mask 'cups.service'
        # Disable socket activation if we have a unit file for it
        if "$SYSTEMCTL_EXEC" -q list-unit-files cups.socket; then
            if [[ $("$SYSTEMCTL_EXEC" is-system-running) != "offline" ]]; then
              "$SYSTEMCTL_EXEC" stop 'cups.socket'
            fi
            "$SYSTEMCTL_EXEC" mask 'cups.socket'
        fi
        # The service may not be running because it has been started and failed,
        # so let's reset the state so OVAL checks pass.
        # Service should be 'inactive', not 'failed' after reboot though.
        "$SYSTEMCTL_EXEC" reset-failed 'cups.service' || true

        else
            >&2 echo 'Remediation is not applicable, nothing was done'
        fi

        ---
  ubuntu:
    '2004':
      references:
        cce:
          - N/A
        disa_stig:
          - N/A
      check:
        - N/A
      fix: |
        [source,bash]
        ---
        # Remediation is applicable only in certain platforms
        if dpkg-query --show --showformat='${db:Status-Status}
        ' 'linux-base' 2>/dev/null | grep -q ^installed; then

        SYSTEMCTL_EXEC='/usr/bin/systemctl'
        if [[ $("$SYSTEMCTL_EXEC" is-system-running) != "offline" ]]; then
          "$SYSTEMCTL_EXEC" stop 'cups.service'
        fi
        "$SYSTEMCTL_EXEC" disable 'cups.service'
        "$SYSTEMCTL_EXEC" mask 'cups.service'
        # Disable socket activation if we have a unit file for it
        if "$SYSTEMCTL_EXEC" -q list-unit-files cups.socket; then
            if [[ $("$SYSTEMCTL_EXEC" is-system-running) != "offline" ]]; then
              "$SYSTEMCTL_EXEC" stop 'cups.socket'
            fi
            "$SYSTEMCTL_EXEC" mask 'cups.socket'
        fi
        # The service may not be running because it has been started and failed,
        # so let's reset the state so OVAL checks pass.
        # Service should be 'inactive', not 'failed' after reboot though.
        "$SYSTEMCTL_EXEC" reset-failed 'cups.service' || true

        else
            >&2 echo 'Remediation is not applicable, nothing was done'
        fi

        ---
    '2204':
      references:
        cce:
          - N/A
        disa_stig:
          - N/A
      check:
        - N/A
      fix: |
        [source,bash]
        ---
        # Remediation is applicable only in certain platforms
        if dpkg-query --show --showformat='${db:Status-Status}
        ' 'linux-base' 2>/dev/null | grep -q ^installed; then

        SYSTEMCTL_EXEC='/usr/bin/systemctl'
        if [[ $("$SYSTEMCTL_EXEC" is-system-running) != "offline" ]]; then
          "$SYSTEMCTL_EXEC" stop 'cups.service'
        fi
        "$SYSTEMCTL_EXEC" disable 'cups.service'
        "$SYSTEMCTL_EXEC" mask 'cups.service'
        # Disable socket activation if we have a unit file for it
        if "$SYSTEMCTL_EXEC" -q list-unit-files cups.socket; then
            if [[ $("$SYSTEMCTL_EXEC" is-system-running) != "offline" ]]; then
              "$SYSTEMCTL_EXEC" stop 'cups.socket'
            fi
            "$SYSTEMCTL_EXEC" mask 'cups.socket'
        fi
        # The service may not be running because it has been started and failed,
        # so let's reset the state so OVAL checks pass.
        # Service should be 'inactive', not 'failed' after reboot though.
        "$SYSTEMCTL_EXEC" reset-failed 'cups.service' || true

        else
            >&2 echo 'Remediation is not applicable, nothing was done'
        fi

        ---
    '2404':
      references:
        cce:
          - N/A
        disa_stig:
          - N/A
      check:
        - N/A
      fix: |
        [source,bash]
        ---
        # Remediation is applicable only in certain platforms
        if dpkg-query --show --showformat='${db:Status-Status}
        ' 'linux-base' 2>/dev/null | grep -q ^installed; then

        SYSTEMCTL_EXEC='/usr/bin/systemctl'
        if [[ $("$SYSTEMCTL_EXEC" is-system-running) != "offline" ]]; then
          "$SYSTEMCTL_EXEC" stop 'cups.service'
        fi
        "$SYSTEMCTL_EXEC" disable 'cups.service'
        "$SYSTEMCTL_EXEC" mask 'cups.service'
        # Disable socket activation if we have a unit file for it
        if "$SYSTEMCTL_EXEC" -q list-unit-files cups.socket; then
            if [[ $("$SYSTEMCTL_EXEC" is-system-running) != "offline" ]]; then
              "$SYSTEMCTL_EXEC" stop 'cups.socket'
            fi
            "$SYSTEMCTL_EXEC" mask 'cups.socket'
        fi
        # The service may not be running because it has been started and failed,
        # so let's reset the state so OVAL checks pass.
        # Service should be 'inactive', not 'failed' after reboot though.
        "$SYSTEMCTL_EXEC" reset-failed 'cups.service' || true

        else
            >&2 echo 'Remediation is not applicable, nothing was done'
        fi

        ---
