id: os_policy_banner_configure
title: Modify the System Login Banner
discussion: |
  Display of a standardized and approved use notification before granting
  access to the operating system ensures privacy and security notification
  verbiage used is consistent with applicable federal laws, Executive Orders,
  directives, policies, regulations, standards, and guidance.


  System use notifications are required only for access via login interfaces
  with human users and are not required when such human interfaces do not
  exist.
check: $OS_VALUE
result:
  integer: 1
fix: $OS_VALUE
references:
  cce:
    - $OS_VALUE
  cci:
    - CCI-000048
    - CCI-001384
    - CCI-001385
    - CCI-001386
    - CCI-001387
    - CCI-001388
  800-53r4:
    - AC-8(a)
    - AC-8(c)
  srg:
    - SRG-OS-000023-GPOS-00006
    - SRG-OS-000228-GPOS-00088
  disa_stig:
    - $OS_VALUE
  cis:
    benchmark:
      - $OS_VALUE
tags:
  - N/A
severity: medium
os_specifics:
  rhel:
    '10':
      references:
        cce:
          - CCE-88261-3
        disa_stig:
          - N/A
      check:
        - N/A
      fix: |
        [source,bash]
        ---
        # Remediation is applicable only in certain platforms
        if rpm --quiet -q kernel; then

        login_banner_text=''


        # Multiple regexes transform the banner regex into a usable banner
        # 0 - Remove anchors around the banner text
        login_banner_text=$(echo "$login_banner_text" | sed 's/^\^\(.*\)\$$/\1/g')
        # 1 - Keep only the first banners if there are multiple
        #    (dod_banners contains the long and short banner)
        login_banner_text=$(echo "$login_banner_text" | sed 's/^(\(.*\.\)|.*)$/\1/g')
        # 2 - Add spaces ' '. (Transforms regex for "space or newline" into a " ")
        login_banner_text=$(echo "$login_banner_text" | sed 's/\[\\s\\n\]+/ /g')
        # 3 - Adds newlines. (Transforms "(?:\[\\n\]+|(?:\\n)+)" into "\n")
        login_banner_text=$(echo "$login_banner_text" | sed 's/(?:\[\\n\]+|(?:\\\\n)+)/\n/g')
        # 4 - Remove any leftover backslash. (From any parethesis in the banner, for example).
        login_banner_text=$(echo "$login_banner_text" | sed 's/\\//g')
        formatted=$(echo "$login_banner_text" | fold -sw 80)
        cat <<EOF >/etc/issue
        $formatted
        EOF

        else
            >&2 echo 'Remediation is not applicable, nothing was done'
        fi

        ---
    '8':
      references:
        cce:
          - CCE-80763-6
        disa_stig:
          - RHEL-08-010060
      check:
        - N/A
      fix: |
        [source,bash]
        ---
        # Remediation is applicable only in certain platforms
        if rpm --quiet -q kernel; then

        login_banner_text=''


        # Multiple regexes transform the banner regex into a usable banner
        # 0 - Remove anchors around the banner text
        login_banner_text=$(echo "$login_banner_text" | sed 's/^\^\(.*\)\$$/\1/g')
        # 1 - Keep only the first banners if there are multiple
        #    (dod_banners contains the long and short banner)
        login_banner_text=$(echo "$login_banner_text" | sed 's/^(\(.*\.\)|.*)$/\1/g')
        # 2 - Add spaces ' '. (Transforms regex for "space or newline" into a " ")
        login_banner_text=$(echo "$login_banner_text" | sed 's/\[\\s\\n\]+/ /g')
        # 3 - Adds newlines. (Transforms "(?:\[\\n\]+|(?:\\n)+)" into "\n")
        login_banner_text=$(echo "$login_banner_text" | sed 's/(?:\[\\n\]+|(?:\\\\n)+)/\n/g')
        # 4 - Remove any leftover backslash. (From any parethesis in the banner, for example).
        login_banner_text=$(echo "$login_banner_text" | sed 's/\\//g')
        formatted=$(echo "$login_banner_text" | fold -sw 80)
        cat <<EOF >/etc/issue
        $formatted
        EOF

        else
            >&2 echo 'Remediation is not applicable, nothing was done'
        fi

        ---
    '9':
      references:
        cce:
          - CCE-83557-9
        disa_stig:
          - RHEL-09-211020
      check:
        - N/A
      fix: |
        [source,bash]
        ---
        # Remediation is applicable only in certain platforms
        if rpm --quiet -q kernel; then

        login_banner_text=''


        # Multiple regexes transform the banner regex into a usable banner
        # 0 - Remove anchors around the banner text
        login_banner_text=$(echo "$login_banner_text" | sed 's/^\^\(.*\)\$$/\1/g')
        # 1 - Keep only the first banners if there are multiple
        #    (dod_banners contains the long and short banner)
        login_banner_text=$(echo "$login_banner_text" | sed 's/^(\(.*\.\)|.*)$/\1/g')
        # 2 - Add spaces ' '. (Transforms regex for "space or newline" into a " ")
        login_banner_text=$(echo "$login_banner_text" | sed 's/\[\\s\\n\]+/ /g')
        # 3 - Adds newlines. (Transforms "(?:\[\\n\]+|(?:\\n)+)" into "\n")
        login_banner_text=$(echo "$login_banner_text" | sed 's/(?:\[\\n\]+|(?:\\\\n)+)/\n/g')
        # 4 - Remove any leftover backslash. (From any parethesis in the banner, for example).
        login_banner_text=$(echo "$login_banner_text" | sed 's/\\//g')
        formatted=$(echo "$login_banner_text" | fold -sw 80)
        cat <<EOF >/etc/issue
        $formatted
        EOF

        else
            >&2 echo 'Remediation is not applicable, nothing was done'
        fi

        ---
  ubuntu:
    '2004':
      references:
        cce:
          - N/A
        disa_stig:
          - N/A
      check:
        - N/A
      fix: |
        [source,bash]
        ---
        # Remediation is applicable only in certain platforms
        if dpkg-query --show --showformat='${db:Status-Status}
        ' 'linux-base' 2>/dev/null | grep -q ^installed; then

        login_banner_text=''


        # Multiple regexes transform the banner regex into a usable banner
        # 0 - Remove anchors around the banner text
        login_banner_text=$(echo "$login_banner_text" | sed 's/^\^\(.*\)\$$/\1/g')
        # 1 - Keep only the first banners if there are multiple
        #    (dod_banners contains the long and short banner)
        login_banner_text=$(echo "$login_banner_text" | sed 's/^(\(.*\.\)|.*)$/\1/g')
        # 2 - Add spaces ' '. (Transforms regex for "space or newline" into a " ")
        login_banner_text=$(echo "$login_banner_text" | sed 's/\[\\s\\n\]+/ /g')
        # 3 - Adds newlines. (Transforms "(?:\[\\n\]+|(?:\\n)+)" into "\n")
        login_banner_text=$(echo "$login_banner_text" | sed 's/(?:\[\\n\]+|(?:\\\\n)+)/\n/g')
        # 4 - Remove any leftover backslash. (From any parethesis in the banner, for example).
        login_banner_text=$(echo "$login_banner_text" | sed 's/\\//g')
        formatted=$(echo "$login_banner_text" | fold -sw 80)
        cat <<EOF >/etc/issue
        $formatted
        EOF

        else
            >&2 echo 'Remediation is not applicable, nothing was done'
        fi

        ---
    '2204':
      references:
        cce:
          - N/A
        disa_stig:
          - N/A
      check:
        - N/A
      fix: |
        [source,bash]
        ---
        # Remediation is applicable only in certain platforms
        if dpkg-query --show --showformat='${db:Status-Status}
        ' 'linux-base' 2>/dev/null | grep -q ^installed; then

        login_banner_text=''


        # Multiple regexes transform the banner regex into a usable banner
        # 0 - Remove anchors around the banner text
        login_banner_text=$(echo "$login_banner_text" | sed 's/^\^\(.*\)\$$/\1/g')
        # 1 - Keep only the first banners if there are multiple
        #    (dod_banners contains the long and short banner)
        login_banner_text=$(echo "$login_banner_text" | sed 's/^(\(.*\.\)|.*)$/\1/g')
        # 2 - Add spaces ' '. (Transforms regex for "space or newline" into a " ")
        login_banner_text=$(echo "$login_banner_text" | sed 's/\[\\s\\n\]+/ /g')
        # 3 - Adds newlines. (Transforms "(?:\[\\n\]+|(?:\\n)+)" into "\n")
        login_banner_text=$(echo "$login_banner_text" | sed 's/(?:\[\\n\]+|(?:\\\\n)+)/\n/g')
        # 4 - Remove any leftover backslash. (From any parethesis in the banner, for example).
        login_banner_text=$(echo "$login_banner_text" | sed 's/\\//g')
        formatted=$(echo "$login_banner_text" | fold -sw 80)
        cat <<EOF >/etc/issue
        $formatted
        EOF

        else
            >&2 echo 'Remediation is not applicable, nothing was done'
        fi

        ---
