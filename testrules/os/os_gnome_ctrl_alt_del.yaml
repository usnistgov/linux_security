id: os_gnome_ctrl_alt_del
title: Disable Ctrl-Alt-Del Reboot Key Sequence in GNOME3
discussion: |
  A locally logged-in user who presses Ctrl-Alt-Del, when at the console,
  can reboot the system. If accidentally pressed, as could happen in
  the case of mixed OS environment, this can create the risk of short-term
  loss of availability of systems due to unintentional reboot.
check: $OS_VALUE
result:
  integer: 1
fix: $OS_VALUE
references:
  cce:
    - $OS_VALUE
  cci:
    - CCI-000366
  800-53r4:
    - AC-6(1)
    - CM-6(a)
    - CM-7(b)
  srg:
    - SRG-OS-000480-GPOS-00227
  disa_stig:
    - $OS_VALUE
  cis:
    benchmark:
      - $OS_VALUE
tags:
  - 800-53r5_high
  - 800-53r5_moderate
severity: high
os_specifics:
  rhel:
    '10':
      references:
        cce:
          - CCE-90658-6
        disa_stig:
          - N/A
      check:
        - N/A
      fix: |
        [source,bash]
        ---
        # Remediation is applicable only in certain platforms
        if rpm --quiet -q gdm && { [ ! -f /.dockerenv ] && [ ! -f /run/.containerenv ]; }; then

        # Check for setting in any of the DConf db directories
        # If files contain ibus or distro, ignore them.
        # The assignment assumes that individual filenames don't contain :
        readarray -t SETTINGSFILES < <(grep -r "\\[org/gnome/settings-daemon/plugins/media-keys\\]" "/etc/dconf/db/" \
                                        | grep -v 'distro\|ibus\|local.d' | cut -d":" -f1)
        DCONFFILE="/etc/dconf/db/local.d/00-security-settings"
        DBDIR="/etc/dconf/db/local.d"

        mkdir -p "${DBDIR}"

        # Comment out the configurations in databases different from the target one
        if [ "${#SETTINGSFILES[@]}" -ne 0 ]
        then
            if grep -q "^\\s*logout\\s*=" "${SETTINGSFILES[@]}"
            then

                sed -Ei "s/(^\s*)logout(\s*=)/#\1logout\2/g" "${SETTINGSFILES[@]}"
            fi
        fi

        [ ! -z "${DCONFFILE}" ] && echo "" >> "${DCONFFILE}"
        if ! grep -q "\\[org/gnome/settings-daemon/plugins/media-keys\\]" "${DCONFFILE}"
        then
            printf '%s\n' "[org/gnome/settings-daemon/plugins/media-keys]" >> ${DCONFFILE}
        fi

        escaped_value="$(sed -e 's/\\/\\\\/g' <<< "['']")"
        if grep -q "^\\s*logout\\s*=" "${DCONFFILE}"
        then
                sed -i "s/\\s*logout\\s*=\\s*.*/logout=${escaped_value}/g" "${DCONFFILE}"
            else
                sed -i "\\|\\[org/gnome/settings-daemon/plugins/media-keys\\]|a\\logout=${escaped_value}" "${DCONFFILE}"
        fi
        dconf update
        # Check for setting in any of the DConf db directories
        LOCKFILES=$(grep -r "^/org/gnome/settings-daemon/plugins/media-keys/logout$" "/etc/dconf/db/" \
                    | grep -v 'distro\|ibus\|local.d' | grep ":" | cut -d":" -f1)
        LOCKSFOLDER="/etc/dconf/db/local.d/locks"

        mkdir -p "${LOCKSFOLDER}"

        # Comment out the configurations in databases different from the target one
        if [[ ! -z "${LOCKFILES}" ]]
        then
            sed -i -E "s|^/org/gnome/settings-daemon/plugins/media-keys/logout$|#&|" "${LOCKFILES[@]}"
        fi

        if ! grep -qr "^/org/gnome/settings-daemon/plugins/media-keys/logout$" /etc/dconf/db/local.d/
        then
            echo "/org/gnome/settings-daemon/plugins/media-keys/logout" >> "/etc/dconf/db/local.d/locks/00-security-settings-lock"
        fi
        dconf update

        else
            >&2 echo 'Remediation is not applicable, nothing was done'
        fi

        ---
    '8':
      references:
        cce:
          - CCE-84028-0
        disa_stig:
          - RHEL-08-040171
      check:
        - N/A
      fix: |
        [source,bash]
        ---
        # Remediation is applicable only in certain platforms
        if rpm --quiet -q gdm && { [ ! -f /.dockerenv ] && [ ! -f /run/.containerenv ]; }; then

        # Check for setting in any of the DConf db directories
        # If files contain ibus or distro, ignore them.
        # The assignment assumes that individual filenames don't contain :
        readarray -t SETTINGSFILES < <(grep -r "\\[org/gnome/settings-daemon/plugins/media-keys\\]" "/etc/dconf/db/" \
                                        | grep -v 'distro\|ibus\|local.d' | cut -d":" -f1)
        DCONFFILE="/etc/dconf/db/local.d/00-security-settings"
        DBDIR="/etc/dconf/db/local.d"

        mkdir -p "${DBDIR}"

        # Comment out the configurations in databases different from the target one
        if [ "${#SETTINGSFILES[@]}" -ne 0 ]
        then
            if grep -q "^\\s*logout\\s*=" "${SETTINGSFILES[@]}"
            then

                sed -Ei "s/(^\s*)logout(\s*=)/#\1logout\2/g" "${SETTINGSFILES[@]}"
            fi
        fi

        [ ! -z "${DCONFFILE}" ] && echo "" >> "${DCONFFILE}"
        if ! grep -q "\\[org/gnome/settings-daemon/plugins/media-keys\\]" "${DCONFFILE}"
        then
            printf '%s\n' "[org/gnome/settings-daemon/plugins/media-keys]" >> ${DCONFFILE}
        fi

        escaped_value="$(sed -e 's/\\/\\\\/g' <<< "['']")"
        if grep -q "^\\s*logout\\s*=" "${DCONFFILE}"
        then
                sed -i "s/\\s*logout\\s*=\\s*.*/logout=${escaped_value}/g" "${DCONFFILE}"
            else
                sed -i "\\|\\[org/gnome/settings-daemon/plugins/media-keys\\]|a\\logout=${escaped_value}" "${DCONFFILE}"
        fi
        dconf update
        # Check for setting in any of the DConf db directories
        LOCKFILES=$(grep -r "^/org/gnome/settings-daemon/plugins/media-keys/logout$" "/etc/dconf/db/" \
                    | grep -v 'distro\|ibus\|local.d' | grep ":" | cut -d":" -f1)
        LOCKSFOLDER="/etc/dconf/db/local.d/locks"

        mkdir -p "${LOCKSFOLDER}"

        # Comment out the configurations in databases different from the target one
        if [[ ! -z "${LOCKFILES}" ]]
        then
            sed -i -E "s|^/org/gnome/settings-daemon/plugins/media-keys/logout$|#&|" "${LOCKFILES[@]}"
        fi

        if ! grep -qr "^/org/gnome/settings-daemon/plugins/media-keys/logout$" /etc/dconf/db/local.d/
        then
            echo "/org/gnome/settings-daemon/plugins/media-keys/logout" >> "/etc/dconf/db/local.d/locks/00-security-settings-lock"
        fi
        dconf update

        else
            >&2 echo 'Remediation is not applicable, nothing was done'
        fi

        ---
    '9':
      references:
        cce:
          - CCE-88653-1
        disa_stig:
          - RHEL-09-271105
          - RHEL-09-271110
      check:
        - N/A
      fix: |
        [source,bash]
        ---
        # Remediation is applicable only in certain platforms
        if rpm --quiet -q gdm && { [ ! -f /.dockerenv ] && [ ! -f /run/.containerenv ]; }; then

        # Check for setting in any of the DConf db directories
        # If files contain ibus or distro, ignore them.
        # The assignment assumes that individual filenames don't contain :
        readarray -t SETTINGSFILES < <(grep -r "\\[org/gnome/settings-daemon/plugins/media-keys\\]" "/etc/dconf/db/" \
                                        | grep -v 'distro\|ibus\|local.d' | cut -d":" -f1)
        DCONFFILE="/etc/dconf/db/local.d/00-security-settings"
        DBDIR="/etc/dconf/db/local.d"

        mkdir -p "${DBDIR}"

        # Comment out the configurations in databases different from the target one
        if [ "${#SETTINGSFILES[@]}" -ne 0 ]
        then
            if grep -q "^\\s*logout\\s*=" "${SETTINGSFILES[@]}"
            then

                sed -Ei "s/(^\s*)logout(\s*=)/#\1logout\2/g" "${SETTINGSFILES[@]}"
            fi
        fi

        [ ! -z "${DCONFFILE}" ] && echo "" >> "${DCONFFILE}"
        if ! grep -q "\\[org/gnome/settings-daemon/plugins/media-keys\\]" "${DCONFFILE}"
        then
            printf '%s\n' "[org/gnome/settings-daemon/plugins/media-keys]" >> ${DCONFFILE}
        fi

        escaped_value="$(sed -e 's/\\/\\\\/g' <<< "['']")"
        if grep -q "^\\s*logout\\s*=" "${DCONFFILE}"
        then
                sed -i "s/\\s*logout\\s*=\\s*.*/logout=${escaped_value}/g" "${DCONFFILE}"
            else
                sed -i "\\|\\[org/gnome/settings-daemon/plugins/media-keys\\]|a\\logout=${escaped_value}" "${DCONFFILE}"
        fi
        dconf update
        # Check for setting in any of the DConf db directories
        LOCKFILES=$(grep -r "^/org/gnome/settings-daemon/plugins/media-keys/logout$" "/etc/dconf/db/" \
                    | grep -v 'distro\|ibus\|local.d' | grep ":" | cut -d":" -f1)
        LOCKSFOLDER="/etc/dconf/db/local.d/locks"

        mkdir -p "${LOCKSFOLDER}"

        # Comment out the configurations in databases different from the target one
        if [[ ! -z "${LOCKFILES}" ]]
        then
            sed -i -E "s|^/org/gnome/settings-daemon/plugins/media-keys/logout$|#&|" "${LOCKFILES[@]}"
        fi

        if ! grep -qr "^/org/gnome/settings-daemon/plugins/media-keys/logout$" /etc/dconf/db/local.d/
        then
            echo "/org/gnome/settings-daemon/plugins/media-keys/logout" >> "/etc/dconf/db/local.d/locks/00-security-settings-lock"
        fi
        dconf update

        else
            >&2 echo 'Remediation is not applicable, nothing was done'
        fi

        ---
  ubuntu:
    '2004':
      references:
        cce:
          - N/A
        disa_stig:
          - UBTU-20-010459
      check:
        - N/A
      fix: |
        [source,bash]
        ---
        # Remediation is applicable only in certain platforms
        if dpkg-query --show --showformat='${db:Status-Status}\n' 'gdm3' 2>/dev/null | grep -q '^installed' && { [ ! -f /.dockerenv ] && [ ! -f /run/.containerenv ]; }; then

        mkdir -p /etc/dconf/profile
        dconf_profile_path=/etc/dconf/profile/user

        [[ -s "${dconf_profile_path}" ]] || echo > "${dconf_profile_path}"

        if ! grep -Pzq "(?s)^\s*user-db:user.*\n\s*system-db:local" "${dconf_profile_path}"; then
            sed -i --follow-symlinks "1s/^/user-db:user\nsystem-db:local\n/" "${dconf_profile_path}"
        fi

        # Make sure the corresponding directories exist
        mkdir -p /etc/dconf/db/local.d

        # Make sure permissions allow regular users to read dconf settings.
        # Also define the umask to avoid `dconf update` changing permissions.
        chmod -R u=rwX,go=rX /etc/dconf/profile
        (umask 0022 && dconf update)
        mkdir -p /etc/dconf/profile
        dconf_profile_path=/etc/dconf/profile/gdm

        [[ -s "${dconf_profile_path}" ]] || echo > "${dconf_profile_path}"

        if ! grep -Pzq "(?s)^\s*user-db:user.*\n\s*system-db:gdm" "${dconf_profile_path}"; then
            sed -i --follow-symlinks "1s/^/user-db:user\nsystem-db:gdm\n/" "${dconf_profile_path}"
        fi

        # Make sure the corresponding directories exist
        mkdir -p /etc/dconf/db/gdm.d

        # Make sure permissions allow regular users to read dconf settings.
        # Also define the umask to avoid `dconf update` changing permissions.
        chmod -R u=rwX,go=rX /etc/dconf/profile
        (umask 0022 && dconf update)


        # Check for setting in any of the DConf db directories
        # If files contain ibus or distro, ignore them.
        # The assignment assumes that individual filenames don't contain :
        readarray -t SETTINGSFILES < <(grep -r "\\[org/gnome/settings-daemon/plugins/media-keys\\]" "/etc/dconf/db/" \
                                        | grep -v 'distro\|ibus\|local.d' | cut -d":" -f1)
        DCONFFILE="/etc/dconf/db/local.d/00-security-settings"
        DBDIR="/etc/dconf/db/local.d"

        mkdir -p "${DBDIR}"

        # Comment out the configurations in databases different from the target one
        if [ "${#SETTINGSFILES[@]}" -ne 0 ]
        then
            if grep -q "^\\s*logout\\s*=" "${SETTINGSFILES[@]}"
            then

                sed -Ei "s/(^\s*)logout(\s*=)/#\1logout\2/g" "${SETTINGSFILES[@]}"
            fi
        fi

        [ ! -z "${DCONFFILE}" ] && echo "" >> "${DCONFFILE}"
        if ! grep -q "\\[org/gnome/settings-daemon/plugins/media-keys\\]" "${DCONFFILE}"
        then
            printf '%s\n' "[org/gnome/settings-daemon/plugins/media-keys]" >> ${DCONFFILE}
        fi

        escaped_value="$(sed -e 's/\\/\\\\/g' <<< "['']")"
        if grep -q "^\\s*logout\\s*=" "${DCONFFILE}"
        then
                sed -i "s/\\s*logout\\s*=\\s*.*/logout=${escaped_value}/g" "${DCONFFILE}"
            else
                sed -i "\\|\\[org/gnome/settings-daemon/plugins/media-keys\\]|a\\logout=${escaped_value}" "${DCONFFILE}"
        fi
        # Make sure permissions allow regular users to read dconf settings.
        # Also define the umask to avoid `dconf update` changing permissions.
        chmod -R u=rwX,go=rX /etc/dconf/db
        (umask 0022 && dconf update)
        # Check for setting in any of the DConf db directories
        LOCKFILES=$(grep -r "^/org/gnome/settings-daemon/plugins/media-keys/logout$" "/etc/dconf/db/" \
                    | grep -v 'distro\|ibus\|local.d' | grep ":" | cut -d":" -f1)
        LOCKSFOLDER="/etc/dconf/db/local.d/locks"

        mkdir -p "${LOCKSFOLDER}"

        # Comment out the configurations in databases different from the target one
        if [[ ! -z "${LOCKFILES}" ]]
        then
            sed -i -E "s|^/org/gnome/settings-daemon/plugins/media-keys/logout$|#&|" "${LOCKFILES[@]}"
        fi

        if ! grep -qr "^/org/gnome/settings-daemon/plugins/media-keys/logout$" /etc/dconf/db/local.d/
        then
            echo "/org/gnome/settings-daemon/plugins/media-keys/logout" >> "/etc/dconf/db/local.d/locks/00-security-settings-lock"
        fi
        # Make sure permissions allow regular users to read dconf settings.
        # Also define the umask to avoid `dconf update` changing permissions.
        chmod -R u=rwX,go=rX /etc/dconf/db
        (umask 0022 && dconf update)

        else
            >&2 echo 'Remediation is not applicable, nothing was done'
        fi

        ---
    '2204':
      references:
        cce:
          - N/A
        disa_stig:
          - UBTU-22-271030
      check:
        - N/A
      fix: |
        [source,bash]
        ---
        # Remediation is applicable only in certain platforms
        if dpkg-query --show --showformat='${db:Status-Status}\n' 'gdm3' 2>/dev/null | grep -q '^installed' && { [ ! -f /.dockerenv ] && [ ! -f /run/.containerenv ]; }; then

        mkdir -p /etc/dconf/profile
        dconf_profile_path=/etc/dconf/profile/user

        [[ -s "${dconf_profile_path}" ]] || echo > "${dconf_profile_path}"

        if ! grep -Pzq "(?s)^\s*user-db:user.*\n\s*system-db:local" "${dconf_profile_path}"; then
            sed -i --follow-symlinks "1s/^/user-db:user\nsystem-db:local\n/" "${dconf_profile_path}"
        fi

        # Make sure the corresponding directories exist
        mkdir -p /etc/dconf/db/local.d

        # Make sure permissions allow regular users to read dconf settings.
        # Also define the umask to avoid `dconf update` changing permissions.
        chmod -R u=rwX,go=rX /etc/dconf/profile
        (umask 0022 && dconf update)
        mkdir -p /etc/dconf/profile
        dconf_profile_path=/etc/dconf/profile/gdm

        [[ -s "${dconf_profile_path}" ]] || echo > "${dconf_profile_path}"

        if ! grep -Pzq "(?s)^\s*user-db:user.*\n\s*system-db:gdm" "${dconf_profile_path}"; then
            sed -i --follow-symlinks "1s/^/user-db:user\nsystem-db:gdm\n/" "${dconf_profile_path}"
        fi

        # Make sure the corresponding directories exist
        mkdir -p /etc/dconf/db/gdm.d

        # Make sure permissions allow regular users to read dconf settings.
        # Also define the umask to avoid `dconf update` changing permissions.
        chmod -R u=rwX,go=rX /etc/dconf/profile
        (umask 0022 && dconf update)


        # Check for setting in any of the DConf db directories
        # If files contain ibus or distro, ignore them.
        # The assignment assumes that individual filenames don't contain :
        readarray -t SETTINGSFILES < <(grep -r "\\[org/gnome/settings-daemon/plugins/media-keys\\]" "/etc/dconf/db/" \
                                        | grep -v 'distro\|ibus\|local.d' | cut -d":" -f1)
        DCONFFILE="/etc/dconf/db/local.d/00-security-settings"
        DBDIR="/etc/dconf/db/local.d"

        mkdir -p "${DBDIR}"

        # Comment out the configurations in databases different from the target one
        if [ "${#SETTINGSFILES[@]}" -ne 0 ]
        then
            if grep -q "^\\s*logout\\s*=" "${SETTINGSFILES[@]}"
            then

                sed -Ei "s/(^\s*)logout(\s*=)/#\1logout\2/g" "${SETTINGSFILES[@]}"
            fi
        fi

        [ ! -z "${DCONFFILE}" ] && echo "" >> "${DCONFFILE}"
        if ! grep -q "\\[org/gnome/settings-daemon/plugins/media-keys\\]" "${DCONFFILE}"
        then
            printf '%s\n' "[org/gnome/settings-daemon/plugins/media-keys]" >> ${DCONFFILE}
        fi

        escaped_value="$(sed -e 's/\\/\\\\/g' <<< "['']")"
        if grep -q "^\\s*logout\\s*=" "${DCONFFILE}"
        then
                sed -i "s/\\s*logout\\s*=\\s*.*/logout=${escaped_value}/g" "${DCONFFILE}"
            else
                sed -i "\\|\\[org/gnome/settings-daemon/plugins/media-keys\\]|a\\logout=${escaped_value}" "${DCONFFILE}"
        fi
        # Make sure permissions allow regular users to read dconf settings.
        # Also define the umask to avoid `dconf update` changing permissions.
        chmod -R u=rwX,go=rX /etc/dconf/db
        (umask 0022 && dconf update)
        # Check for setting in any of the DConf db directories
        LOCKFILES=$(grep -r "^/org/gnome/settings-daemon/plugins/media-keys/logout$" "/etc/dconf/db/" \
                    | grep -v 'distro\|ibus\|local.d' | grep ":" | cut -d":" -f1)
        LOCKSFOLDER="/etc/dconf/db/local.d/locks"

        mkdir -p "${LOCKSFOLDER}"

        # Comment out the configurations in databases different from the target one
        if [[ ! -z "${LOCKFILES}" ]]
        then
            sed -i -E "s|^/org/gnome/settings-daemon/plugins/media-keys/logout$|#&|" "${LOCKFILES[@]}"
        fi

        if ! grep -qr "^/org/gnome/settings-daemon/plugins/media-keys/logout$" /etc/dconf/db/local.d/
        then
            echo "/org/gnome/settings-daemon/plugins/media-keys/logout" >> "/etc/dconf/db/local.d/locks/00-security-settings-lock"
        fi
        # Make sure permissions allow regular users to read dconf settings.
        # Also define the umask to avoid `dconf update` changing permissions.
        chmod -R u=rwX,go=rX /etc/dconf/db
        (umask 0022 && dconf update)

        else
            >&2 echo 'Remediation is not applicable, nothing was done'
        fi

        ---
