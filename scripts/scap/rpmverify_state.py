from dataclasses import dataclass, field
from typing import Optional

from scap.entity_state_bool_type import EntityStateBoolType
from scap.entity_state_rpm_verify_result_type import (
    EntityStateRpmVerifyResultType,
)
from scap.entity_state_string_type import EntityStateStringType
from scap.state_type import StateType

__NAMESPACE__ = "http://oval.mitre.org/XMLSchema/oval-definitions-5#linux"


@dataclass
class RpmverifyState(StateType):
    """The rpmverify_state element defines the different information that can be
    used to evaluate the specified rpm.

    This includes the architecture, epoch number, and version numbers.
    Most of this information can be obtained through the rpm function.
    Please refer to the individual elements in the schema for more
    details about what each represents.

    :ivar name: This is the package name to check.
    :ivar filepath: The filepath element specifies the absolute path for
        a file or directory in the specified package.
    :ivar size_differs: The size_differs entity aligns with the first
        character ('S' flag) in the character string in the output
        generated by running rpm –V on a specific file.
    :ivar mode_differs: The mode_differs entity aligns with the second
        character ('M' flag) in the character string in the output
        generated by running rpm –V on a specific file.
    :ivar md5_differs: The md5_differs entity aligns with the third
        character ('5' flag) in the character string in the output
        generated by running rpm –V on a specific file.
    :ivar device_differs: The device_differs entity aligns with the
        fourth character ('D' flag) in the character string in the
        output generated by running rpm –V on a specific file.
    :ivar link_mismatch: The link_mismatch entity aligns with the fifth
        character ('L' flag) in the character string in the output
        generated by running rpm –V on a specific file.
    :ivar ownership_differs: The ownership_differs entity aligns with
        the sixth character ('U' flag) in the character string in the
        output generated by running rpm –V on a specific file.
    :ivar group_differs: The group_differs entity aligns with the
        seventh character ('U' flag) in the character string in the
        output generated by running rpm –V on a specific file.
    :ivar mtime_differs: The mtime_differs entity aligns with the eighth
        character ('T' flag) in the character string in the output
        generated by running rpm –V on a specific file.
    :ivar capabilities_differ: The size_differs entity aligns with the
        ninth character ('P' flag) in the character string in the output
        generated by running rpm –V on a specific file.
    :ivar configuration_file: The configuration_file entity represents
        the configuration file attribute marker that may be present on a
        file.
    :ivar documentation_file: The documentation_file entity represents
        the documenation file attribute marker that may be present on a
        file.
    :ivar ghost_file: The ghost_file entity represents the ghost file
        attribute marker that may be present on a file.
    :ivar license_file: The license_file entity represents the license
        file attribute marker that may be present on a file.
    :ivar readme_file: The readme_file entity represents the readme file
        attribute marker that may be present on a file.
    """

    class Meta:
        name = "rpmverify_state"
        namespace = "http://oval.mitre.org/XMLSchema/oval-definitions-5#linux"

    name: Optional[EntityStateStringType] = field(
        default=None,
        metadata={
            "type": "Element",
            
        },
    )
    filepath: Optional[EntityStateStringType] = field(
        default=None,
        metadata={
            "type": "Element",
            
        },
    )
    size_differs: Optional[EntityStateRpmVerifyResultType] = field(
        default=None,
        metadata={
            "type": "Element",
            
        },
    )
    mode_differs: Optional[EntityStateRpmVerifyResultType] = field(
        default=None,
        metadata={
            "type": "Element",
            
        },
    )
    md5_differs: Optional[EntityStateRpmVerifyResultType] = field(
        default=None,
        metadata={
            "type": "Element",
            
        },
    )
    device_differs: Optional[EntityStateRpmVerifyResultType] = field(
        default=None,
        metadata={
            "type": "Element",
            
        },
    )
    link_mismatch: Optional[EntityStateRpmVerifyResultType] = field(
        default=None,
        metadata={
            "type": "Element",
            
        },
    )
    ownership_differs: Optional[EntityStateRpmVerifyResultType] = field(
        default=None,
        metadata={
            "type": "Element",
            
        },
    )
    group_differs: Optional[EntityStateRpmVerifyResultType] = field(
        default=None,
        metadata={
            "type": "Element",
            
        },
    )
    mtime_differs: Optional[EntityStateRpmVerifyResultType] = field(
        default=None,
        metadata={
            "type": "Element",
            
        },
    )
    capabilities_differ: Optional[EntityStateRpmVerifyResultType] = field(
        default=None,
        metadata={
            "type": "Element",
            
        },
    )
    configuration_file: Optional[EntityStateBoolType] = field(
        default=None,
        metadata={
            "type": "Element",
            
        },
    )
    documentation_file: Optional[EntityStateBoolType] = field(
        default=None,
        metadata={
            "type": "Element",
            
        },
    )
    ghost_file: Optional[EntityStateBoolType] = field(
        default=None,
        metadata={
            "type": "Element",
            
        },
    )
    license_file: Optional[EntityStateBoolType] = field(
        default=None,
        metadata={
            "type": "Element",
            
        },
    )
    readme_file: Optional[EntityStateBoolType] = field(
        default=None,
        metadata={
            "type": "Element",
            
        },
    )
