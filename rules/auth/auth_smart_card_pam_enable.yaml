id: auth_smart_card_pam_enable
title: "Enable Smart Card Logins in PAM"
discussion: |
  Smart card login provides two-factor authentication stronger than that provided by a username and password combination. Smart cards leverage PKI (public key infrastructure) in order to provide and verify credentials. Using an authentication device, such as a CAC or token that is separate from the information system, ensures that even if the information system is compromised, that compromise will not affect credentials stored on the authentication device. Multifactor solutions that require devices separate from information systems gaining access include, for example, hardware tokens providing time-based or challenge-response authenticators and smart cards such as the U.S. Government Personal Identity Verification card and the DoD Common Access Card.
check: |
  $OS_VALUE
result:
  integer: 1
fix: |
  $OS_VALUE
references:
  cce:
    - $OS_VALUE
  cci:
    - CCI-000765
    - CCI-000766
    - CCI-000767
    - CCI-000768
    - CCI-000187
    - CCI-001948
    - CCI-001953
    - CCI-001954
  800-53r5:
    - N/A
  srg:
    - SRG-OS-000068-GPOS-00036
    - SRG-OS-000105-GPOS-00052
    - SRG-OS-000106-GPOS-00053
    - SRG-OS-000107-GPOS-00054
    - SRG-OS-000108-GPOS-00055
    - SRG-OS-000375-GPOS-00160
    - SRG-OS-000375-GPOS-00161
    - SRG-OS-000375-GPOS-00162
  disa_stig:
    - $OS_VALUE
tags:
  - 800-53r5_moderate
  - 800-53r5_high
  - client
  - server
severity: "medium"
os_specifics:
  ubuntu:
    '2004':
      references:
        cce:
          - N/A
        disa_stig:
          - UBTU-20-010033
        check: |
          echo "Check This"
        fix: |
          [source,bash]
          ---
          # Remediation is applicable only in certain platforms
          if [ ! -f /.dockerenv ] && [ ! -f /run/.containerenv ]; then

          if [ -e "/etc/pam.d/common-auth" ] ; then
              valueRegex="" defaultValue=""
              # non-empty values need to be preceded by an equals sign
              [ -n "${valueRegex}" ] && valueRegex="=${valueRegex}"
              # add an equals sign to non-empty values
              [ -n "${defaultValue}" ] && defaultValue="=${defaultValue}"

              # fix 'type' if it's wrong
              if grep -q -P "^\\s*(?"'!'"auth\\s)[[:alnum:]]+\\s+[[:alnum:]]+\\s+pam_pkcs11.so" < "/etc/pam.d/common-auth" ; then
                  sed --follow-symlinks -i -E -e "s/^(\\s*)[[:alnum:]]+(\\s+[[:alnum:]]+\\s+pam_pkcs11.so)/\\1auth\\2/" "/etc/pam.d/common-auth"
              fi

              # fix 'control' if it's wrong
              if grep -q -P "^\\s*auth\\s+(?"'!'"[success=2 default=ignore])[[:alnum:]]+\\s+pam_pkcs11.so" < "/etc/pam.d/common-auth" ; then
                  sed --follow-symlinks -i -E -e "s/^(\\s*auth\\s+)[[:alnum:]]+(\\s+pam_pkcs11.so)/\\1[success=2 default=ignore]\\2/" "/etc/pam.d/common-auth"
              fi

              # fix the value for 'option' if one exists but does not match 'valueRegex'
              if grep -q -P "^\\s*auth\\s+[success=2 default=ignore]\\s+pam_pkcs11.so(\\s.+)?\\s+(?"'!'"${valueRegex}(\\s|\$))" < "/etc/pam.d/common-auth" ; then
                  sed --follow-symlinks -i -E -e "s/^(\\s*auth\\s+[success=2 default=ignore]\\s+pam_pkcs11.so(\\s.+)?\\s)=[^[:space:]]*/\\1${defaultValue}/" "/etc/pam.d/common-auth"

              # add 'option=default' if option is not set
              elif grep -q -E "^\\s*auth\\s+[success=2 default=ignore]\\s+pam_pkcs11.so" < "/etc/pam.d/common-auth" &&
                      grep    -E "^\\s*auth\\s+[success=2 default=ignore]\\s+pam_pkcs11.so" < "/etc/pam.d/common-auth" | grep -q -E -v "\\s(=|\\s|\$)" ; then

                  sed --follow-symlinks -i -E -e "s/^(\\s*auth\\s+[success=2 default=ignore]\\s+pam_pkcs11.so[^\\n]*)/\\1 ${defaultValue}/" "/etc/pam.d/common-auth"
              # add a new entry if none exists
              elif ! grep -q -P "^\\s*auth\\s+[success=2 default=ignore]\\s+pam_pkcs11.so(\\s.+)?\\s+${valueRegex}(\\s|\$)" < "/etc/pam.d/common-auth" ; then
                  echo "auth [success=2 default=ignore] pam_pkcs11.so ${defaultValue}" >> "/etc/pam.d/common-auth"
              fi
          else
              echo "/etc/pam.d/common-auth doesn't exist" >&2
          fi

          else
              >&2 echo 'Remediation is not applicable, nothing was done'
          fi
          ---
    '2204':
      references:
        cce:
          - N/A
        check: |
          echo "Check This"
        fix: |
          [source,bash]
          ---
          # Remediation is applicable only in certain platforms
          if [ ! -f /.dockerenv ] && [ ! -f /run/.containerenv ]; then

          if [ -e "/etc/pam.d/common-auth" ] ; then
              valueRegex="" defaultValue=""
              # non-empty values need to be preceded by an equals sign
              [ -n "${valueRegex}" ] && valueRegex="=${valueRegex}"
              # add an equals sign to non-empty values
              [ -n "${defaultValue}" ] && defaultValue="=${defaultValue}"

              # fix 'type' if it's wrong
              if grep -q -P "^\\s*(?"'!'"auth\\s)[[:alnum:]]+\\s+[[:alnum:]]+\\s+pam_pkcs11.so" < "/etc/pam.d/common-auth" ; then
                  sed --follow-symlinks -i -E -e "s/^(\\s*)[[:alnum:]]+(\\s+[[:alnum:]]+\\s+pam_pkcs11.so)/\\1auth\\2/" "/etc/pam.d/common-auth"
              fi

              # fix 'control' if it's wrong
              if grep -q -P "^\\s*auth\\s+(?"'!'"[success=2 default=ignore])[[:alnum:]]+\\s+pam_pkcs11.so" < "/etc/pam.d/common-auth" ; then
                  sed --follow-symlinks -i -E -e "s/^(\\s*auth\\s+)[[:alnum:]]+(\\s+pam_pkcs11.so)/\\1[success=2 default=ignore]\\2/" "/etc/pam.d/common-auth"
              fi

              # fix the value for 'option' if one exists but does not match 'valueRegex'
              if grep -q -P "^\\s*auth\\s+[success=2 default=ignore]\\s+pam_pkcs11.so(\\s.+)?\\s+(?"'!'"${valueRegex}(\\s|\$))" < "/etc/pam.d/common-auth" ; then
                  sed --follow-symlinks -i -E -e "s/^(\\s*auth\\s+[success=2 default=ignore]\\s+pam_pkcs11.so(\\s.+)?\\s)=[^[:space:]]*/\\1${defaultValue}/" "/etc/pam.d/common-auth"

              # add 'option=default' if option is not set
              elif grep -q -E "^\\s*auth\\s+[success=2 default=ignore]\\s+pam_pkcs11.so" < "/etc/pam.d/common-auth" &&
                      grep    -E "^\\s*auth\\s+[success=2 default=ignore]\\s+pam_pkcs11.so" < "/etc/pam.d/common-auth" | grep -q -E -v "\\s(=|\\s|\$)" ; then

                  sed --follow-symlinks -i -E -e "s/^(\\s*auth\\s+[success=2 default=ignore]\\s+pam_pkcs11.so[^\\n]*)/\\1 ${defaultValue}/" "/etc/pam.d/common-auth"
              # add a new entry if none exists
              elif ! grep -q -P "^\\s*auth\\s+[success=2 default=ignore]\\s+pam_pkcs11.so(\\s.+)?\\s+${valueRegex}(\\s|\$)" < "/etc/pam.d/common-auth" ; then
                  echo "auth [success=2 default=ignore] pam_pkcs11.so ${defaultValue}" >> "/etc/pam.d/common-auth"
              fi
          else
              echo "/etc/pam.d/common-auth doesn't exist" >&2
          fi

          else
              >&2 echo 'Remediation is not applicable, nothing was done'
          fi
          ---
