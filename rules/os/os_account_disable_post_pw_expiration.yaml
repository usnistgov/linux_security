id: os_account_disable_post_pw_expiration
title: The Ubuntu operating system must disable account identifiers (individuals,groups, roles, and devices) after 35 days of inactivity.
discussion: |
  Inactive identifiers pose a risk to systems and applications because attackers may exploit an inactive identifier and potentially obtain undetected access to the system. Owners of inactive accounts will not notice if unauthorized access to their user account has been obtained. Operating systems need to track periods of inactivity and disable application identifiers after 35 days of inactivity.
check: |
  $OS_VALUE
result:
  integer: 1
fix: |
  $OS_VALUE
references: 
    cce: 
      - $OS_VALUE
    cci:  
      - CCI-000795
    800_53r5: 
      - IA-4
    srg: 
      - SRG-OS-000118-GPOS-00060
    disa_stig: 
      - $OS_VALUE
tags:
  - 800-53r5_moderate
  - 800-53r5_high
  - client
  - server
  - manual
severity: 
  - medium
os_specifics: 
  ubuntu:
    '2004':
      references:
        cce:
          - N/A
        disa_stig:
          - UBTU-20-010409
        check: |
          #!/bin/bash

          # This script tests the settings for useradd for default settings on disabling accounts after 35 days
          # Define the maximum number of inactive days
          inactive_days=35

          # Check the value of INACTIVE in /etc/default/useradd
          inactive_setting=$(grep '^INACTIVE' /etc/default/useradd | awk -F= '{print $2}')

          # Check if INACTIVE is set and greater than or equal to 35
          if [ -n "$inactive_setting" ] && [ "$inactive_setting" -ge "$inactive_days" ]; then
              echo "PASS. Accounts will be automatically disabled if not used for $inactive_days days."
          else
              echo "FAIL. Accounts are not configured to be automatically disabled after $inactive_days days of inactivity."
          fi
        fix: |
          #!/bin/bash

          # Remediation is applicable only in certain platforms. This fix is extracted from the Ubuntu Pro 20-04 LTS STIG.
          if dpkg-query --show --showformat='${db:Status-Status}\n' 'login' 2>/dev/null | grep -q installed; then

            var_account_disable_post_pw_expiration='35'

            # Test if the config_file is a symbolic link. If so, use --follow-symlinks with sed.
            # Otherwise, regular sed command will do.
            sed_command=('sed' '-i')
            if test -L "/etc/default/useradd"; then
                sed_command+=('--follow-symlinks')
            fi

            # If the cce arg is empty, CCE is not assigned.
            if [ -z "" ]; then
                cce="CCE"
            else
                cce=""
            fi

            # Strip any search characters in the key arg so that the key can be replaced without
            # adding any search characters to the config file.
            stripped_key=$(sed 's/[\^=\$,;+]*//g' <<< "^INACTIVE")

            # shellcheck disable=SC2059
            printf -v formatted_output "%s=%s" "$stripped_key" "$var_account_disable_post_pw_expiration"

            # If the key exists, change it. Otherwise, add it to the config_file.
            # We search for the key string followed by a word boundary (matched by \>),
            # so if we search for 'setting', 'setting2' won't match.
            if LC_ALL=C grep -q -m 1 -i -e "^INACTIVE\\>" "/etc/default/useradd"; then
                "${sed_command[@]}" "s/^INACTIVE\\>.*/$formatted_output/gi" "/etc/default/useradd"
            else
                # \n is precaution for case where file ends without trailing newline
                printf '\n# Per %s: Set %s in %s\n' "$cce" "$formatted_output" "/etc/default/useradd" >> "/etc/default/useradd"
                printf '%s\n' "$formatted_output" >> "/etc/default/useradd"
            fi

          else
              >&2 echo 'Remediation is not applicable, nothing was done'
          fi